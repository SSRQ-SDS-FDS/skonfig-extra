#!/bin/sh -e
#
# 2020-2021 Dennis Camera (dennis.camera at ssrq-sds-fds.ch)
#
# This file is part of cdist.
#
# cdist is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# cdist is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with cdist. If not, see <http://www.gnu.org/licenses/>.
#

# Function to compare version strings. Returns success (0) if the version
# given by stdin is higher than the version provided by the argument.
#
# Taken from the cdist core type __sensible_editor.
version_ge() {
	awk -F '[^0-9.]' -v target="${1:?}" '
		function max(x, y) { return x > y ? x : y; }
		BEGIN {
				getline;
				nx = split($1, x, ".");
				ny = split(target, y, ".");
				for (i = 1; i <= max(nx, ny); ++i) {
						diff = int(x[i]) - int(y[i]);
						if (diff < 0) exit 1;
						else if (diff > 0) exit 0;
						else continue;
				}
		}'
}


os=$(cat "${__global:?}/explorer/os")

case ${os}
in
	(debian|devuan)
		kernel_headers_pkg=$(cat "${__object:?}/explorer/kernel_headers_pkg")

		test -n "${kernel_headers_pkg}" || {
			echo 'Could not determine the name of the kernel headers package.' >&2
			exit 1
		}

		# enable backports repo
		# XXX: maybe the type should not be the one to decide whether or not to
		# use backports
		__apt_backports --component main --component contrib

		# ZFS
		read -r lsb_codename <"${__global:?}/explorer/lsb_codename"

		if test -n "${kernel_headers_pkg%/*}" != "${kernel_headers_pkg}"
		then
			require=__apt_backports/ \
			__package_apt "${kernel_headers_pkg%/*}" --target-release "${kernel_headers_pkg#*/}"
		else
			require=__apt_backports/ \
			__package_apt "${kernel_headers_pkg%/*}" --target-release "${kernel_headers_pkg#*/}"
		fi

		require="__apt_backports/ __package_apt/${kernel_headers_pkg%/*}" \
		__package_apt zfs-modules --target-release "${lsb_codename:?}-backports"

		require=__apt_backports/ \
		__package_apt zfsutils-linux --target-release "${lsb_codename:?}-backports"

		# FIXME: For some reason De*an does not build/install DKMS modules after
		# installing the package under some circumstances.
		#  1) dkms status
		# If it does not:
		#  2) dkms install all the not-installed modules, e.g.
		#     for beowulf stable:
		#      - dkms build spl/0.7.12
		#      - dkms build zfs/0.7.12
		#      - dkms install spl/0.7.12
		#      - dkms install zfs/0.7.12
		#     for beowulf backports:
		#      - dkms build zfs/0.8.4
		#      - dkms install zfs/0.8.4

		case $(cat "${__object:?}/explorer/mailer")
		in
			(mail)
				;;
			(sendmail|*)
				__package bsd-mailx
				mail_require=__package/bsd-mailx
				;;
		esac

		export CDIST_ORDER_DEPENDENCY=true
		require="__apt_backports/ __package_apt/zfsutils-linux${mail_require:+ ${mail_require}}" \
		__package_apt zfs-zed --target-release "${lsb_codename:?}-backports"

		__start_on_boot zfs-zed
		unset CDIST_ORDER_DEPENDENCY
		;;
	(*)
		: "${__type:?}"  # make shellcheck happy
		printf "Your operating system (%s) is currently not supported by this type (%s)\n" "${os}" "${__type##*/}" >&2
		printf "Please contribute an implementation for it if you can.\n" >&2
		exit 1
		;;
esac

require='__package_apt/zfs-modules' \
__block /etc/modprobe.d/zfs.conf:cdist-zfs-tunables \
	--state "$(test -s "${__object:?}/parameter/tunable" && echo present || echo absent)" \
	--file /etc/modprobe.d/zfs.conf \
	--prefix '# cdist:zfs-tunables' \
	--suffix '#/cdist:zfs-tunables' \
	--text - <<EOF
$(sed -e 's/^/options zfs /' "${__object:?}/parameter/tunable")
EOF


# HACK: Workaround spl bug that exhausts all memory on `zfs scrub' on non-4k
#       page sizes
#       https://github.com/openzfs/zfs/issues/11756
#       https://github.com/openzfs/zfs/issues/11574
#       Was fixed in OpenZFS 2.0.5:
#         https://github.com/openzfs/zfs/pull/12152
#         https://github.com/openzfs/zfs/releases/tag/zfs-2.0.5
kmod_version=$(sed -n -e 's/^zfs-kmod-\([0-9.]*\).*/\1/p' <"${__object:?}/explorer/openzfs_version")
if ! echo "${kmod_version}" | version_ge 2.0.5
then
	# We only need to apply this hack on OpenZFS < 2.0.5
	spl_kmem_cache_slab_limit=16384
fi
require='__package_apt/zfs-modules' \
__block /etc/modprobe.d/zfs.conf:cdist-spl-workaround-11574 \
	--state "$(test "${spl_kmem_cache_slab_limit-}" && echo present || echo absent)" \
	--file /etc/modprobe.d/zfs.conf \
	--prefix '# cdist:spl-workaround-11574' \
	--suffix '#/cdist:spl-workaround-11574' \
	--text - <<EOF
options spl spl_kmem_cache_slab_limit=$((spl_kmem_cache_slab_limit))
EOF

set_zed_rc() {
	require=__package_apt/zfs-zed \
	__key_value /etc/zfs/zed.d/zed.rc:"$1" \
		--delimiter '=' --exact_delimiter \
		--file /etc/zfs/zed.d/zed.rc \
		--key "$1" \
		--value "$(
			case ${2:?}
			in
				(true|false|yes|no)
					printf '%s' "$2"
					;;
				(*)
					if expr "$2" : '[0-9]*$' >/dev/null
					then
						# plain numbers
						printf '%s' "$2"
					else
						# quote strings
						printf '"%s"' "$2"
					fi
					;;
			esac)"
}

set_zed_rc ZED_NOTIFY_INTERVAL_SECS 900
set_zed_rc ZED_EMAIL_ADDR "$(head -n 1 "${__object:?}/parameter/mailto")"
set_zed_rc ZED_NOTIFY_VERBOSE "$(test -f "${__object:?}/parameter/notify-verbose" && echo 1 || echo 0)"
set_zed_rc ZED_USE_ENCLOSURE_LEDS 1

# Auto load keys

# NOTE: OpenZFS >= 2.1.3 ships with a zfs-load-key init script that load and
#       unloads keys based on /etc/default/zfs options ZFS_LOAD_KEY,
#       ZFS_UNLOAD_KEY.
#       For some reason Debian doesnâ€™t package this init script although the
#       "/etc/default" options are present.
require=__package_apt/zfsutils-linux \
__key_value /etc/default/zfs:MOUNT_EXTRA_OPTIONS \
	--file /etc/default/zfs \
	--delimiter = --exact_delimiter \
	--key MOUNT_EXTRA_OPTIONS \
	--value "\"$(test -f "${__object:?}/parameter/auto-load-keys" && printf '%s' '-l')\""

# Verbose mount
require=__package_apt/zfsutils-linux \
__key_value /etc/default/zfs:VERBOSE_MOUNT \
	--file /etc/default/zfs \
	--delimiter = --exact_delimiter \
	--key VERBOSE_MOUNT \
	--value "'$(test -f "${__object:?}/parameter/verbose-mount" && echo yes || echo no)'"
