#!/bin/sh -e
#
# 2020,2023 Dennis Camera (dennis.camera at riiengineering.ch)
#
# This file is part of skonfig-extra.
#
# skonfig-extra is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# skonfig-extra is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with skonfig-extra. If not, see <http://www.gnu.org/licenses/>.
#

version_ge() {
	# usage: version_ge version_is min_version_expected
	#
	# compares two version numbers (up to three numeric components separated
	# with dots)
	# returns 0 if `version_is` >= `min_version_expected`, 1 otherwise.
	#
	# NOTES: if the lowest value (1st line) of the two version numbers is equal
	#        to `min_version_expected`, `version_is` must be the same or larger.
	#        explicit `-k n,n` is required for some sort(1)s.
	printf '%s\n' "$1" "$2" \
	| sort -t '.' -n -k 1,1 -k 2,2 -k 3,3 \
	| head -1 \
	| grep -qxF "$2"
}

zfs_param_bool() {
	# usage: zfs_param_bool param_name
	#
	# prints "yes" if the boolean parameter is used, "no" otherwise.

	if test -f "${__object:?}/parameter/${1:?}"
	then
		echo 'yes'
	else
		echo 'no'
	fi

}

# FIXME: the version variables may be empty if ZFS is not yet installed
zfs_version=$(sed -n -e 's/^zfs-\([0-9.]*\).*/\1/p' <"${__object:?}/explorer/openzfs_version")
kmod_version=$(sed -n -e 's/^zfs-kmod-\([0-9.]*\).*/\1/p' <"${__object:?}/explorer/openzfs_version")

os=$(cat "${__global:?}/explorer/os")

case ${os}
in
	(debian|devuan)
		# enable backports repo
		# XXX: maybe the type should not be the one to decide whether or not to
		# use backports
		__apt_backports --component main --component contrib

		# ZFS
		read -r lsb_codename <"${__global:?}/explorer/lsb_codename"

		kernel_headers_pkg=$(cat "${__object:?}/explorer/kernel_headers_pkg")
		case ${kernel_headers_pkg}
		in
			('')
				echo 'Could not determine the name of the kernel headers package.' >&2
				exit 1
				;;
			(*/*)
				require=__apt_backports/ \
				__package_apt "${kernel_headers_pkg%%/*}" --target-release "${kernel_headers_pkg#*/}"
				;;
			(*)
				require=__apt_backports/ \
				__package_apt "${kernel_headers_pkg%%/*}"
				;;
		esac

		require="__apt_backports/ __package_apt/${kernel_headers_pkg%%/*}" \
		__package_apt zfs-modules --target-release "${lsb_codename:?}-backports"

		require=__apt_backports/ \
		__package_apt zfsutils-linux --target-release "${lsb_codename:?}-backports"

		# FIXME: For some reason De*an does not build/install DKMS modules after
		# installing the package under some circumstances.
		#  1) dkms status
		# If it does not:
		#  2) dkms install all the not-installed modules, e.g.
		#     for beowulf stable:
		#      - dkms build spl/0.7.12
		#      - dkms build zfs/0.7.12
		#      - dkms install spl/0.7.12
		#      - dkms install zfs/0.7.12
		#     for beowulf backports:
		#      - dkms build zfs/0.8.4
		#      - dkms install zfs/0.8.4

		read -r mailer <"${__object:?}/explorer/mailer"
		case ${mailer}
		in
			(mail)
				;;
			(sendmail|*)
				__package bsd-mailx
				mail_require=__package/bsd-mailx
				;;
		esac

		require="__apt_backports/ __package_apt/zfsutils-linux${mail_require:+ ${mail_require}}" \
		__package_apt zfs-zed --target-release "${lsb_codename:?}-backports"

		require=__package_apt/zfs-zed \
		__start_on_boot zfs-zed
		;;
	(*)
		: "${__type:?}"  # make shellcheck happy
		printf "Your operating system (%s) is currently not supported by this type (%s)\n" "${os}" "${__type##*/}" >&2
		printf "Please contribute an implementation for it if you can.\n" >&2
		exit 1
		;;
esac

require=__package_apt/zfs-modules \
__block /etc/modprobe.d/zfs.conf:cdist-zfs-tunables \
	--state "$(test -s "${__object:?}/parameter/tunable" && echo present || echo absent)" \
	--file /etc/modprobe.d/zfs.conf \
	--prefix '# cdist:zfs-tunables' \
	--suffix '#/cdist:zfs-tunables' \
	--text - <<EOF
$(sed -e 's/^/options zfs /' "${__object:?}/parameter/tunable")
EOF


# HACK: Workaround spl bug that exhausts all memory on `zfs scrub' on non-4k
#       page sizes
#       https://github.com/openzfs/zfs/issues/11756
#       https://github.com/openzfs/zfs/issues/11574
#       Was fixed in OpenZFS 2.0.5:
#         https://github.com/openzfs/zfs/pull/12152
#         https://github.com/openzfs/zfs/releases/tag/zfs-2.0.5
if test -n "${kmod_version}"
then
	# NOTE: $kmod_version could be empty on the first run (explorers run before
	#       zfs could be installed). In this case we skip this section and only
	#       apply it on subsequent runs.
	if ! version_ge "${kmod_version}" 2.0.5
	then
		# We only need to apply this hack on OpenZFS < 2.0.5
		spl_kmem_cache_slab_limit=16384
	fi
	require=__package_apt/zfs-modules \
	__block /etc/modprobe.d/zfs.conf:cdist-spl-workaround-11574 \
		--state "$(test "${spl_kmem_cache_slab_limit-}" && echo present || echo absent)" \
		--file /etc/modprobe.d/zfs.conf \
		--prefix '# cdist:spl-workaround-11574' \
		--suffix '#/cdist:spl-workaround-11574' \
		--text - <<-EOF
	options spl spl_kmem_cache_slab_limit=$((spl_kmem_cache_slab_limit))
	EOF
fi

set_zed_rc() {
	require=__package_apt/zfs-zed \
	__key_value /etc/zfs/zed.d/zed.rc:"$1" \
		--delimiter '=' --exact_delimiter \
		--file /etc/zfs/zed.d/zed.rc \
		--key "$1" \
		--value "$(
			case ${2:?}
			in
				(true|false|yes|no)
					printf '%s' "$2"
					;;
				(*)
					if expr "$2" : '[0-9]*$' >/dev/null
					then
						# plain numbers
						printf '%s' "$2"
					else
						# quote strings
						printf '"%s"' "$2"
					fi
					;;
			esac)"
}

set_zed_rc ZED_NOTIFY_INTERVAL_SECS 900
set_zed_rc ZED_EMAIL_ADDR "$(head -n 1 "${__object:?}/parameter/mailto")"
set_zed_rc ZED_NOTIFY_VERBOSE "$(test -f "${__object:?}/parameter/notify-verbose" && echo 1 || echo 0)"
set_zed_rc ZED_USE_ENCLOSURE_LEDS 1

# Auto load keys

# NOTE: OpenZFS >= 2.1.3 ships with a zfs-load-key init script which loads and
#       unloads keys based on /etc/default/zfs options ZFS_LOAD_KEY and
#       ZFS_UNLOAD_KEY.
#
#       For some reason Debian didnâ€™t package this init script until version
#       2.1.6 although the /etc/default options were present, cf.
#       https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=1017911
if test -n "${zfs_version}"
then
	# NOTE: $zfs_version could be empty on the first run (explorers run before
	#       zfs could be installed). In this case we skip this section and only
	#       apply it on subsequent runs.
	if version_ge "${zfs_version}" 2.1.3
	then
		zfs_load_key=$(zfs_param_bool auto-load-keys)

		# NOTE: require zfsutils-linux package because an upgrade in this run
		#       could've overwritten /etc/default/zfs.
		require=__package_apt/zfsutils-linux \
		__key_value /etc/default/zfs:ZFS_LOAD_KEY \
			--file /etc/default/zfs \
			--delimiter '=' --exact_delimiter \
			--key ZFS_LOAD_KEY \
			--value "'${zfs_load_key}'"
		require=__package_apt/zfsutils-linux \
		__key_value /etc/default/zfs:ZFS_UNLOAD_KEY \
			--file /etc/default/zfs \
			--delimiter '=' --exact_delimiter \
			--key ZFS_UNLOAD_KEY \
			--value "'${zfs_load_key}'"
	else
		if test -f "${__object:?}/parameter/auto-load-keys"
		then
			mount_extra_options=${mount_extra_options-}${mount_extra_options:+ }-l
		fi
	fi
fi

require=__package_apt/zfsutils-linux \
__key_value /etc/default/zfs:MOUNT_EXTRA_OPTIONS \
	--file /etc/default/zfs \
	--delimiter '=' --exact_delimiter \
	--key MOUNT_EXTRA_OPTIONS \
	--value "\"${mount_extra_options-}\""

# Verbose mount
require=__package_apt/zfsutils-linux \
__key_value /etc/default/zfs:VERBOSE_MOUNT \
	--file /etc/default/zfs \
	--delimiter = --exact_delimiter \
	--key VERBOSE_MOUNT \
	--value "'$(zfs_param_bool verbose-mount)'"
